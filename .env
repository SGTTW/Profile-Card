



# initial - stage 0 task


# <!DOCTYPE html>
# <html lang="en">
#   <head>
#     <meta charset="UTF-8" />
#     <meta name="viewport" content="width=device-width, initial-scale=1.0" />
#     <title>Profile Card</title>
#     <link rel="stylesheet" href="styles.css" />
#   </head>
#   <body>
#     <main>
#       <article data-testid="test-profile-card" class="profile-card">
#         <header class="profile-header">
#           <figure class="profile-picture-wrapper">
#             <img
#               data-testid="test-user-picture"
#               src="sgProfilePic.png"
#               alt="Oluwasegun Adeniyi's profile picture"
#               class="profile-picture"
#             />
#           </figure>

#           <div class="profile-info">
#             <h1 data-testid="test-user-name" class="profile-name">
#               Oluwasegun Adeniyi
#             </h1>
#             <p data-testid="test-user-bio" class="profile-bio">
#               Frontend developer passionate about creating accessible web
#               experiences. I love building clean, user-friendly applications
#               that make a difference.
#             </p>
#             <time
#               data-testid="test-user-time"
#               class="profile-time"
#               id="currentTime"
#             ></time>
#           </div>
#         </header>

#         <nav aria-label="Social media links">
#           <ul data-testid="test-user-social-links" class="social-links">
#             <li>
#               <a
#                 data-testid="test-user-social-twitter"
#                 href="https://x.com/sg_ttw"
#                 target="_blank"
#                 rel="noopener noreferrer"
#                 aria-label="Visit Oluwasegun Adeniyi's Twitter profile"
#               >
#                 <svg
#                   width="20"
#                   height="20"
#                   viewBox="0 0 24 24"
#                   fill="currentColor"
#                 >
#                   <path
#                     d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
#                   />
#                 </svg>
#                 Twitter
#               </a>
#             </li>
#             <li>
#               <a
#                 data-testid="test-user-social-github"
#                 href="https://github.com/SGTTW"
#                 target="_blank"
#                 rel="noopener noreferrer"
#                 aria-label="Visit Oluwasegun Adeniyi's GitHub profile"
#               >
#                 <svg
#                   width="20"
#                   height="20"
#                   viewBox="0 0 24 24"
#                   fill="currentColor"
#                 >
#                   <path
#                     d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
#                   />
#                 </svg>
#                 GitHub
#               </a>
#             </li>
#             <li>
#               <a
#                 data-testid="test-user-social-linkedin"
#                 href="https://www.linkedin.com/in/oluwasegunadeniyi-/"
#                 target="_blank"
#                 rel="noopener noreferrer"
#                 aria-label="Visit Oluwasegun Adeniyi's LinkedIn profile"
#               >
#                 <svg
#                   width="20"
#                   height="20"
#                   viewBox="0 0 24 24"
#                   fill="currentColor"
#                 >
#                   <path
#                     d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
#                   />
#                 </svg>
#                 LinkedIn
#               </a>
#             </li>
#           </ul>
#         </nav>

#         <section aria-labelledby="hobbies-heading" class="profile-section">
#           <h2 id="hobbies-heading" class="section-title">Hobbies</h2>
#           <ul data-testid="test-user-hobbies" class="info-list">
#             <li>Coding side projects</li>
#             <li>Playing guitar</li>
#             <li>Hiking and outdoor photography</li>
#             <li>Reading tech blogs and sci-fi novels</li>
#             <li>Learning new programming languages</li>
#           </ul>
#         </section>

#         <section aria-labelledby="dislikes-heading" class="profile-section">
#           <h2 id="dislikes-heading" class="section-title">Dislikes</h2>
#           <ul data-testid="test-user-dislikes" class="info-list">
#             <li>Poorly documented code</li>
#             <li>Inaccessible websites</li>
#             <li>Coffee (tea person here!)</li>
#             <li>Unnecessary meetings</li>
#             <li>Browser compatibility issues</li>
#           </ul>
#         </section>
#       </article>
#     </main>

#     <script src="script.js"></script>
#   </body>
# </html>





# /* Reset and base styles */
# * {
#     margin: 0;
#     padding: 0;
#     box-sizing: border-box;
# }

# :root {
#     --primary-color: #2563eb;
#     --secondary-color: #64748b;
#     --text-primary: #1e293b;
#     --text-secondary: #475569;
#     --bg-card: #ffffff;
#     --bg-body: #f1f5f9;
#     --border-color: #e2e8f0;
#     --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
#     --shadow-hover: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
#     --focus-ring: 0 0 0 3px rgba(37, 99, 235, 0.3);
# }

# body {
#     font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
#     line-height: 1.6;
#     color: var(--text-primary);
#     background-color: var(--bg-body);
#     min-height: 100vh;
#     display: flex;
#     align-items: center;
#     justify-content: center;
#     padding: 1rem;
# }

# main {
#     width: 100%;
#     max-width: 900px;
# }

# /* Profile card */
# .profile-card {
#     background: var(--bg-card);
#     border-radius: 16px;
#     box-shadow: var(--shadow);
#     padding: 2rem;
#     transition: box-shadow 0.3s ease;
# }

# .profile-card:hover {
#     box-shadow: var(--shadow-hover);
# }

# /* Header section */
# .profile-header {
#     display: flex;
#     flex-direction: column;
#     gap: 1.5rem;
#     margin-bottom: 2rem;
#     padding-bottom: 2rem;
#     border-bottom: 2px solid var(--border-color);
# }

# .profile-picture-wrapper {
#     align-self: center;
# }

# .profile-picture {
#     width: 120px;
#     height: 120px;
#     border-radius: 50%;
#     object-fit: cover;
#     border: 4px solid var(--primary-color);
#     box-shadow: var(--shadow);
# }

# .profile-info {
#     text-align: center;
# }

# .profile-name {
#     font-size: 2rem;
#     font-weight: 700;
#     color: var(--text-primary);
#     margin-bottom: 0.5rem;
# }

# .profile-bio {
#     font-size: 1rem;
#     color: var(--text-secondary);
#     margin-bottom: 1rem;
#     line-height: 1.7;
# }

# .profile-time {
#     display: inline-block;
#     font-size: 0.875rem;
#     color: var(--secondary-color);
#     background: var(--bg-body);
#     padding: 0.5rem 1rem;
#     border-radius: 8px;
#     font-family: 'Courier New', monospace;
# }

# /* Social links */
# nav {
#     margin-bottom: 2rem;
# }

# .social-links {
#     list-style: none;
#     display: flex;
#     gap: 1rem;
#     flex-wrap: wrap;
#     justify-content: center;
# }

# .social-links li a {
#     display: flex;
#     align-items: center;
#     gap: 0.5rem;
#     padding: 0.75rem 1.25rem;
#     background: var(--bg-body);
#     color: var(--text-primary);
#     text-decoration: none;
#     border-radius: 8px;
#     font-weight: 500;
#     transition: all 0.3s ease;
#     border: 2px solid transparent;
# }

# .social-links li a:hover {
#     background: var(--primary-color);
#     color: white;
#     transform: translateY(-2px);
#     box-shadow: var(--shadow);
# }

# .social-links li a:focus {
#     outline: none;
#     box-shadow: var(--focus-ring);
#     border-color: var(--primary-color);
# }

# .social-links li a svg {
#     flex-shrink: 0;
# }

# /* Profile sections */
# .profile-section {
#     margin-bottom: 2rem;
# }

# .profile-section:last-of-type {
#     margin-bottom: 0;
# }

# .section-title {
#     font-size: 1.25rem;
#     font-weight: 600;
#     color: var(--text-primary);
#     margin-bottom: 1rem;
#     display: flex;
#     align-items: center;
#     gap: 0.5rem;
# }

# .section-title::before {
#     content: '';
#     width: 4px;
#     height: 1.5rem;
#     background: var(--primary-color);
#     border-radius: 2px;
# }

# .info-list {
#     list-style: none;
#     display: grid;
#     gap: 0.75rem;
# }

# .info-list li {
#     padding: 0.75rem 1rem;
#     background: var(--bg-body);
#     border-radius: 8px;
#     border-left: 3px solid var(--primary-color);
#     transition: transform 0.2s ease, box-shadow 0.2s ease;
# }

# .info-list li:hover {
#     transform: translateX(4px);
#     box-shadow: var(--shadow);
# }

# /* Responsive design - Tablet */
# @media (min-width: 640px) {
#     .profile-card {
#         padding: 2.5rem;
#     }

#     .info-list {
#         grid-template-columns: repeat(2, 1fr);
#     }
# }

# /* Responsive design - Desktop */
# @media (min-width: 768px) {
#     .profile-header {
#         flex-direction: row;
#         text-align: left;
#         align-items: center;
#     }

#     .profile-picture-wrapper {
#         align-self: flex-start;
#     }

#     .profile-info {
#         text-align: left;
#         flex: 1;
#     }

#     .profile-time {
#         display: inline-block;
#     }

#     .social-links {
#         justify-content: flex-start;
#     }
# }

# @media (min-width: 1024px) {
#     .profile-card {
#         padding: 3rem;
#     }

#     .profile-picture {
#         width: 150px;
#         height: 150px;
#     }

#     .profile-name {
#         font-size: 2.5rem;
#     }
# }

# /* Accessibility improvements */
# @media (prefers-reduced-motion: reduce) {
#     * {
#         animation-duration: 0.01ms !important;
#         animation-iteration-count: 1 !important;
#         transition-duration: 0.01ms !important;
#     }
# }

# /* Focus visible for keyboard navigation */
# a:focus-visible,
# button:focus-visible {
#     outline: 2px solid var(--primary-color);
#     outline-offset: 2px;
# }

# /* High contrast mode support */
# @media (prefers-contrast: high) {
#     :root {
#         --primary-color: #0000ff;
#         --text-primary: #000000;
#         --bg-card: #ffffff;
#         --border-color: #000000;
#     }

#     .profile-picture,
#     .info-list li,
#     .social-links li a {
#         border-width: 2px;
#     }
# }








# // Contact form validation and submission handling

# document.addEventListener('DOMContentLoaded', () => {
#     const form = document.getElementById('contactForm');
#     const successMessage = document.getElementById('successMessage');

#     // Form fields
#     const nameField = document.querySelector('[data-testid="test-contact-name"]');
#     const emailField = document.querySelector('[data-testid="test-contact-email"]');
#     const subjectField = document.querySelector('[data-testid="test-contact-subject"]');
#     const messageField = document.querySelector('[data-testid="test-contact-message"]');

#     // Error message elements
#     const errorName = document.querySelector('[data-testid="test-contact-error-name"]');
#     const errorEmail = document.querySelector('[data-testid="test-contact-error-email"]');
#     const errorSubject = document.querySelector('[data-testid="test-contact-error-subject"]');
#     const errorMessage = document.querySelector('[data-testid="test-contact-error-message"]');

#     // Validation functions
#     const validators = {
#         name: (value) => {
#             if (!value.trim()) {
#                 return 'Full name is required';
#             }
#             if (value.trim().length < 2) {
#                 return 'Name must be at least 2 characters';
#             }
#             return '';
#         },

#         email: (value) => {
#             if (!value.trim()) {
#                 return 'Email address is required';
#             }
#             // Email regex pattern
#             const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
#             if (!emailPattern.test(value)) {
#                 return 'Please enter a valid email address (e.g., name@example.com)';
#             }
#             return '';
#         },

#         subject: (value) => {
#             if (!value.trim()) {
#                 return 'Subject is required';
#             }
#             if (value.trim().length < 3) {
#                 return 'Subject must be at least 3 characters';
#             }
#             return '';
#         },

#         message: (value) => {
#             if (!value.trim()) {
#                 return 'Message is required';
#             }
#             if (value.trim().length < 10) {
#                 return 'Message must be at least 10 characters';
#             }
#             return '';
#         }
#     };

#     // Display error message
#     function showError(field, errorElement, message) {
#         errorElement.textContent = message;
#         errorElement.style.display = message ? 'block' : 'none';

#         if (message) {
#             field.classList.add('input-error');
#             field.setAttribute('aria-invalid', 'true');
#         } else {
#             field.classList.remove('input-error');
#             field.setAttribute('aria-invalid', 'false');
#         }
#     }

#     // Clear error message
#     function clearError(field, errorElement) {
#         showError(field, errorElement, '');
#     }

#     // Validate single field
#     function validateField(field, errorElement, validatorKey) {
#         const value = field.value;
#         const errorMsg = validators[validatorKey](value);
#         showError(field, errorElement, errorMsg);
#         return !errorMsg;
#     }

#     // Real-time validation on blur
#     nameField.addEventListener('blur', () => {
#         validateField(nameField, errorName, 'name');
#     });

#     emailField.addEventListener('blur', () => {
#         validateField(emailField, errorEmail, 'email');
#     });

#     subjectField.addEventListener('blur', () => {
#         validateField(subjectField, errorSubject, 'subject');
#     });

#     messageField.addEventListener('blur', () => {
#         validateField(messageField, errorMessage, 'message');
#     });

#     // Clear errors on input (after user starts typing)
#     nameField.addEventListener('input', () => {
#         if (errorName.textContent) {
#             clearError(nameField, errorName);
#         }
#     });

#     emailField.addEventListener('input', () => {
#         if (errorEmail.textContent) {
#             clearError(emailField, errorEmail);
#         }
#     });

#     subjectField.addEventListener('input', () => {
#         if (errorSubject.textContent) {
#             clearError(subjectField, errorSubject);
#         }
#     });

#     messageField.addEventListener('input', () => {
#         if (errorMessage.textContent) {
#             clearError(messageField, errorMessage);
#         }
#     });

#     // Form submission
#     form.addEventListener('submit', (e) => {
#         e.preventDefault();

#         // Hide success message if it was previously shown
#         successMessage.style.display = 'none';

#         // Validate all fields
#         const isNameValid = validateField(nameField, errorName, 'name');
#         const isEmailValid = validateField(emailField, errorEmail, 'email');
#         const isSubjectValid = validateField(subjectField, errorSubject, 'subject');
#         const isMessageValid = validateField(messageField, errorMessage, 'message');

#         // Check if all validations passed
#         const isFormValid = isNameValid && isEmailValid && isSubjectValid && isMessageValid;

#         if (isFormValid) {
#             // Show success message
#             successMessage.style.display = 'flex';

#             // Scroll to success message
#             successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });

#             // Focus on success message for screen readers
#             successMessage.focus();

#             // Reset form
#             form.reset();

#             // Log submission (in production, this would be an API call)
#             console.log('Form submitted successfully:', {
#                 name: nameField.value,
#                 email: emailField.value,
#                 subject: subjectField.value,
#                 message: messageField.value,
#                 timestamp: new Date().toISOString()
#             });

#             // Optional: Hide success message after 5 seconds
#             setTimeout(() => {
#                 successMessage.style.display = 'none';
#             }, 5000);
#         } else {
#             // Focus on first error field
#             if (!isNameValid) {
#                 nameField.focus();
#             } else if (!isEmailValid) {
#                 emailField.focus();
#             } else if (!isSubjectValid) {
#                 subjectField.focus();
#             } else if (!isMessageValid) {
#                 messageField.focus();
#             }
#         }
#     });

#     // Character counter for message field (optional enhancement)
#     messageField.addEventListener('input', () => {
#         const charCount = messageField.value.length;
#         const minChars = 10;

#         if (charCount > 0 && charCount < minChars) {
#             const remaining = minChars - charCount;
#             const hint = `${remaining} more character${remaining !== 1 ? 's' : ''} needed`;
#             // Could display this hint if you add a character counter element
#         }
#     });
# });

# End of contact form validation and submission handling